#!/bin/bash

docker_compose="docker-compose"
node="docker-compose -f $(pwd)/docker/utils/docker-compose.yml"
composer="docker-compose -f $(pwd)/docker/utils/docker-compose.yml"
pgsql="docker-compose -f $(pwd)/docker/postgres/docker-compose.yml"

# if [ "$1" = "teste" ]; then
#     echo "teste";
# else
#     echo "t";
# fi;

php_cmd(){
    artisan_cmd "$@"
}

artisan_cmd(){
    $docker_compose run --rm app php "$@"
}

pgsql_cmd_up(){
    $pgsql up -d
}

pgsql_cmd_down(){
    $pgsql down
}

test_cmd(){
    $docker_compose run --rm app php artisan "$@"
}

docker_compose_up(){
    pgsql_cmd_down
    docker_compose_down
    pgsql_cmd_up
    sleep 5
    $docker_compose up $1
}

docker_compose_build(){
    docker_compose_down
    $docker_compose build $1
}

docker_compose_down(){
    $docker_compose down $1
}

composer_build(){
    $composer build composer
}

composer_cmd(){
    composer_build
    $composer run --rm composer "$@"
}

npm_build(){
    $node build npm
}

npm_cmd(){
    npm_build
    $composer run --rm node "$@"
}
infection_cmd(){
    php_cmd ./vendor/bin/infection
}

pint_cmd(){
    php_cmd  ./vendor/bin/pint -v
}

check_cmd(){
    test_cmd test
    infection_cmd
    pint_cmd
}
swarm_prod_cmd(){
    echo "Vou iniciar a configuração do ambiente de produção"
    git fetch
    git reset origin/master --hard
    export $(cat .env)
    docker-compose -f docker-compose-prd.yml build
    docker tag api-maliin_nginx:latest "$REGISTRY_URL"/api-maliin_nginx:latest
    docker tag api-maliin_app:latest "$REGISTRY_URL"/api-maliin_app:latest
    docker push "$REGISTRY_URL"/api-maliin_nginx:latest
    docker push "$REGISTRY_URL"/api-maliin_app:latest
    docker service rm $1_api_maliin_app $1_api_maliin_qakit_nginx $1_api_maliin_qakit_queue $1_api_maliin_qakit_scheduler
    export $(cat .env) > /dev/null 2>&1; docker stack deploy --prune --resolve-image always --with-registry-auth -c docker-compose-swarm.yml $1
}
case "$1" in
    "up") docker_compose_up $2;;
    "down") docker_compose_down $2 ;;
    "build") docker_compose_build $2 ;;
    "composer") composer_cmd "$@" --ignore-platform-reqs ;;
    "npm") npm_cmd "$@" ;;
    "artisan") artisan_cmd "$@" ;;
    "test") test_cmd "$@" ;;
    "start-pgsql") pgsql_cmd_up ;;
    "stop-pgsql") pgsql_cmd_down ;;
    "pint") pint_cmd;;
    "infection") infection_cmd ;;
    "check") check_cmd ;;
    "swarm") swarm_prod_cmd $2 ;;
    *) php_cmd "$@"
esac
